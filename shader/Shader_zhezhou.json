{
  "id": 7127,
  "name": "New Basic Shader",
  "fragment": "precision highp float;\nprecision highp int;\n\nuniform mat4 modelMatrix;\nuniform vec3 color;         // 主色（紅色）\nuniform vec3 glowColor;     // 發光色（黃色）\nuniform float glowStrength; // 發光強度\nuniform vec3 bulbPos;       // 燈泡中心的世界座標\nuniform float redAlpha;     // 紅色部分的透明度（如0.5）\n\nvarying vec3 vPosition;\n\nvoid main() {\n    vec3 worldPosition = (modelMatrix * vec4(vPosition, 1.0)).xyz;\n    float dist = length(worldPosition - bulbPos);\n\n    // 高斯漸變\n    float glow = exp(-pow(dist * glowStrength, 2.55));\n\n    // 設定一個閾值，中心區域直接用黃光\n    float threshold = 0.5; // 你可以根據效果調整這個值\n\n    vec3 lanternColor;\n    float alpha;\n\n    if (glow > threshold) {\n        lanternColor = glowColor;\n        alpha = 1.0;\n    } else {\n        // 在紅色和黃色之間平滑過渡\n        float t = glow / threshold; // 0~1\n        lanternColor = mix(color, glowColor, t);\n        alpha = mix(redAlpha, 1.0, t);\n    }\n\n    gl_FragColor = vec4(lanternColor, alpha);\n}",
  "vertex": "/**\n* Example Vertex Shader\n* Sets the position of the vertex by setting gl_Position\n*/\n\n// Set the precision for data types used in this shader\nprecision highp float;\nprecision highp int;\n\n// Default THREE.js uniforms available to both fragment and vertex shader\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\n\n// Default uniforms provided by ShaderFrog.\nuniform vec3 cameraPosition;\nuniform float time;\n\n// Default attributes provided by THREE.js. Attributes are only available in the\n// vertex shader. You can pass them to the fragment shader using varyings\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n\n// Examples of variables passed from vertex to fragment shader\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\n\nvoid main() {\n\n    // To pass variables to the fragment shader, you assign them here in the\n    // main function. Traditionally you name the varying with vAttributeName\n    vNormal = normal;\n    vUv = uv;\n    vUv2 = uv2;\n    vPosition = position;\n\n    // This sets the position of the vertex in 3d space. The correct math is\n    // provided below to take into account camera and object data.\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}",
  "uniforms": {
    "cameraPosition": {
      "name": "cameraPosition",
      "displayName": null,
      "type": "v3",
      "glslType": "vec3",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "time": {
      "name": "time",
      "displayName": null,
      "type": "f",
      "glslType": "float",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "color": {
      "name": "color",
      "displayName": null,
      "type": "c",
      "glslType": "vec3",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": "Example light color"
    },
    "glowColor": {
      "name": "glowColor",
      "displayName": null,
      "type": "c",
      "glslType": "vec3",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "glowStrength": {
      "name": "glowStrength",
      "displayName": null,
      "type": "f",
      "glslType": "float",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "bulbPos": {
      "name": "bulbPos",
      "displayName": null,
      "type": "v3",
      "glslType": "vec3",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    },
    "redAlpha": {
      "name": "redAlpha",
      "displayName": null,
      "type": "f",
      "glslType": "float",
      "useGridHelper": false,
      "useRange": false,
      "range": null,
      "isRandom": false,
      "randomRange": null,
      "useToggle": false,
      "toggle": null,
      "description": ""
    }
  },
  "url": "http://shaderfrog.com/app/view/7127",
  "user": {
    "username": "Cloeny",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}